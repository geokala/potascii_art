#! /usr/bin/env python3
from PIL import Image as Potatimage
import cv2

printato = print

colors = [ ((0, 255, 0), '🍏',),
           ((255, 0, 0), '🍟'),
           ((255, 255, 0), '🍠'),
	   ((0, 0, 0), '🍆'),
#	   ((128, 128, 128),   '🥔'),
           ((255, 255, 255), '🍚')]

filename = 'potato-people.jpg'

potato = Potatimage.open(filename)
potato.thumbnail((80, 80), Potatimage.ANTIALIAS)

width = potato.width
height = potato.height

def best_match (r, g, b):
    best = 20000000
    best_symbol = '🥔'
    for (color, symbol) in colors:
        (r2, g2, b2) = color
        d = abs (r - r2) + abs (g - g2) + abs (b - b2)
        if d < best:
            best = d
            best_symbol = symbol
    return best_symbol

# Output variable, potatos come in sacks, not strings.
sack = ''
x = 0
y = 0
for (r, g, b) in potato.getdata ():
    sack += best_match (r, g, b)
    x += 1
    if x == potato.width:
        sack += '\n'
        x = 0
        y += 1

image = cv2.imread (filename)
gray = cv2.cvtColor (image, cv2.COLOR_BGR2GRAY)
faceCascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
faces = faceCascade.detectMultiScale(gray,
                                     scaleFactor=1.1,
                                     minNeighbors=5,
                                     minSize=(30, 30))

scale = 1 / 10

ascii_faces = []
for (x, y, width, height) in faces:
    x2 = int (x * scale)
    y2 = int (y * scale)
    width2 = int (width * scale)
    height2 = int (height * scale)
    ascii_faces.append ((x2, y2, width2, height2))

im = Potatimage.open (filename)
width = int (im.width * scale)
height = int (im.height * scale)

def in_face (x, y, c):
    for (face_x, face_y, width, height) in ascii_faces:
        if x >= face_x and x < face_x + width and y >= face_y and y < face_y + height:
            if x - face_x == 1 and y - face_y == 1:
                return '👁️ '
            elif x - face_x == width - 2 and y - face_y == 1:
                return '👁️ '
            else:
                return '🥔'
    return c

x = 0
y = 0
out_sack = ''
for c in sack:
    if c == '\n':
        x = 0
        y += 1
        out_sack += '\n'
    else:
        x += 1
        out_sack += in_face (x, y, c)

printato (out_sack)
